1. Differences between stateless and stateful components: 
- Stateful Component: Can be both Class-based and Functional 
components. Stateful components are components that manage state

- Stateless Components: is the Functional Component that doesn't 
manage state

2. Differences between Class-based and Functional components: 

- Class-based Component: 
+, Components that having a Class that extends the Components object
+, Use Lifecycle Hooks
+, Access State and Props via "this" keyword
+, Use class-based if you need to manage State or access to 
Lifecycle Hooks and you dont want to use React Hooks

- Functional Component: 
+, Components that have a Function that is passed prop in
+, Have access to Hooks but doesn't have Lifecycle Hooks
+, Access Props via "Props"
+, Use in all other Cases

3. Component Lifecycle:

a. Lifecycle:
- Is a bunch of methods or function that is automatically run 
in the background to form a process of creating or updating 
components in React application

- With the understanding of the Lifecycle methods, we can 
access it for our own usage. So we need to understand the following: 
+, Different method names: what is the function of that method, 
what is it used for
+, The order of those methods: which run before or after which
+, Goes into details: how to access, argument, return, etc...

b. Creation Component Lifecycle: 
- See the order of these components in LifecycleCreate.pdf
(commit 1-4th is Lifecycle.pdf)

- What does each methods do: 
+, constructor(props): run when a component is created. 
Can do basic initialization
+, getDerivedStateFromProps(props, state): hooks to use to initialize 
and update the state. Don't send request here
+, render(): render the JSX code, Don't send request here
+, Render Child Component: self explained 
+, componentDidMount(): state the completion of component creation, 
can make request here to get response. Can do async code here, Don't 
do async code on any of other methods above

See the use of this function in App.js, 
Hit the button, watch the console log to see the output
NOTE THAT: SEE 1ST AND 2ND COMMIT FOR CODING OF THIS PART

END OF 1ST till 4TH COMMIT
---------------------------------------------------------------------
3b. Updation Component Lifecycle: 
- See the order of these components in LifecycleUpdate.pdf

- What does each methods do:
+, getDerivedStateFromProps(props, state): used for updating state and initialize 
props. Dont send requests
+, shouldComponentUpdate(nextProp, nextState): Cancel the updating process
or proccedd to update. Can be used for improving performance
, cancel unneccessary updates. Dont send requests here
+, render(): construct the JSX
+, Update Child Component Props
+, getSnapshotBeforeUpdate(prevProps, prevState): takes previous props 
and states, return an object of props and object to perform Last-minute
DOM operations. Dont send requests here
+, componentDidUpdate(): Signal the completion of updating. Can send 
request here. Dont update state here

3c. Lifecycle real example notes: 
- Creation Lifecycle: See the methods in App.js. See the console
to notice what method got executed. Notice that the method is never
called in the code. However, it is executed in the background, that's
why you see it is running in the console.
> this is the whole point of Lifecycle

- Updation Lifecycle (for props): See in Persons.js. Remember to 
type in textbox for to see more output. Same thing need to notice 
as Creation Lifecycle

- Updation Lifecycle (for state): See in App.js. Remember to click
button to see more output. Same thing need to notice

END OF 5TH till 7TH COMMIT
---------------------------------------------------------------------
4. Using useEffect(): 
a. What is it ? 
- The 2nd most important React hook, next to useState
- It is a React Hook, not a method Lifecycle hooks like those above
- It combine all the functionalities of all the class-based 
Lifecycle hooks. It is a function you can add into one of your functional
components

b. How to use it ?
- See example of Cockpit.js
- Targeting what data that you want to take effect: 
+, passing targeted props as a 2nd function for useEffect()
+, If the argument is not passed, when we toggle the button, 
the operation will not be activated
+, If nothing is passed, with every operation, the action 
will be activated

5. Cleaning up: 
a. What is it ?
- Lifecycle method for class based or useEffect for
functional component
- Purpose: clean up some event listener, disable it when needed

b. How to do it ? 
- See componentWillUnmount() in Persons.js
- See the return function of useEffect() in Cockpit.js. 
+, The function returned in useEffect() will run before the 
main useEffect function runs but after the first render cycle

- See 2 useEffect() in Cockpit.JS
- See how timer got removed in Cockpit.js to see how cleanup
work in useEffect() work

END OF 8TH - 9TH COMMIT
---------------------------------------------------------------------
From Optimization to PureComponent > Doesn't understand

COMMIT 10TH: PureComponent in Persons.js: 
+, Replace import { Component } with { PureComponent }
+, automatically do the work of shouldComponentUpdate() 
in the commented code

END OF 10TH COMMIT
---------------------------------------------------------------------
6. How React Updates the DOM: 
- See the map at 2:44 of video 101 to understand how
- React keeps 2 virtual DOM: 
+, The Old virtual DOM and the re-rendered DOM
> check for Differences and update only what changed

---------------------------------------------------------------------
7. Rendering Adjacent JSX: 
- In JSX, we can only return 1 html element with Child
elements within them. For example, you can not return 
two <div> next to each other.

- However, If you really need to return 2 elements next to 
each other, there is a way around it: 
+, return an array of different Adjacent elements:
Video 102, Bookmark 1: show the 1st way of doing it 

+, Use higher order component, see the example in 
Person.js commit 11st
> How to import the Auxi element
> see in hoc/Auxi.js
> How to use the Auxi element

+, Use Fragment, see example in Person.js commit
12nd
> See how to import Fragment
> Fragment is used exactly like <Auxi>
without having to code anything further

END OF 11ST - 12ND COMMIT
---------------------------------------------------------------------
8. Higher Order Component: 
- HOC is a component that wraps around another component
providing more utilities for the component that it wraps

- 1st Way of using HOC > see commit 13rd
> Look in App.js how WithClass is used, 
import, and coded

- 2nd Way of using HOC > see commit 14th
> Look in App.js, how withClass is imported, 
exported and coded

- Passing props with HOC: see WithClass.js and Person.js
commit 15TH

END OF 13RD - 15TH COMMIT
---------------------------------------------------------------------
9. Update state properly: 
- App.js within nameChangedHandler, the setState() is done
differently

10. Using PropTypes: 
- Used to restrict the datatype that is passed by Props

- installation package: 
npm install --save prop-type

- See usage in Person.js (PropsType)
try change the state.persons[0].age to a string in 
App.js > there will be a warning that talk about
the correct datatype

11. Using ref: 
- Person.js: See the usage of ref attribute in the input tag
(Class-based approach)

- Cockpit.js: See the usage of ref attribute in the button tag
(functional component approach)

END OF 16TH, 17TH COMMIT
---------------------------------------------------------------------
11. Using Context: 
a. Problem: 
- If we have components within components, it's uncovenient
to pass props from Component A -> B -> C
- This is why we use Context, we can store info
in Context to pass info directly from A -> C

b. How we do it ?
- Create a new context folder > goes to 
context/auth-context.js
to see how to make a context file

- Output expected: 
Hit Toggle button > Hit login button 
> heading in each person should change from
'Please Login' to 'Authenticated'

- Goes to App.js, Cockpit.js, Person.js, 
look for <AuthContext> tag to see how to use, 
and import it

- <AuthContext.Provider>: provide the info value
<AuthContext.Comsumer>: use the info value of the
context

c. Faster Way of doing it: 
- Using contextType: for classBased
- Using useContext() for functional

---------------------------------------------------------------------
Sum up modules: 
- Dive deep about components, its lifecycle, its
available tools and how to pass and retrieve data
properly

- Cockpit.js: show how to do things in functional
component

- Person.js, Persons.js: show how to do things
in class based component. 

END OF 18TH COMMIT
---------------------------------------------------------------------
