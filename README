1. Differences between stateless and stateful components: 
- Stateful Component: Can be both Class-based and Functional 
components. Stateful components are components that manage state

- Stateless Components: is the Functional Component that doesn't 
manage state

2. Differences between Class-based and Functional components: 

- Class-based Component: 
+, Components that having a Class that extends the Components object
+, Use Lifecycle Hooks
+, Access State and Props via "this" keyword
+, Use class-based if you need to manage State or access to 
Lifecycle Hooks and you dont want to use React Hooks

- Functional Component: 
+, Components that have a Function that is passed prop in
+, Have access to Hooks but doesn't have Lifecycle Hooks
+, Access Props via "Props"
+, Use in all other Cases

3. Component Lifecycle:

a. Lifecycle:
- Is a bunch of methods or function that is automatically run 
in the background to form a process of creating or updating 
components in React application

- With the understanding of the Lifecycle methods, we can 
access it for our own usage. So we need to understand the following: 
+, Different method names: what is the function of that method, 
what is it used for
+, The order of those methods: which run before or after which
+, Goes into details: how to access, argument, return, etc...

b. Creation Component Lifecycle: 
- See the order of these components in LifecycleCreate.pdf
(commit 1-4th is Lifecycle.pdf)

- What does each methods do: 
+, constructor(props): run when a component is created. 
Can do basic initialization
+, getDerivedStateFromProps(props, state): hooks to use to initialize 
and update the state. Don't send request here
+, render(): render the JSX code, Don't send request here
+, Render Child Component: self explained 
+, componentDidMount(): state the completion of component creation, 
can make request here to get response. Can do async code here, Don't 
do async code on any of other methods above

See the use of this function in App.js, 
Hit the button, watch the console log to see the output
NOTE THAT: SEE 1ST AND 2ND COMMIT FOR CODING OF THIS PART

END OF 1ST till 4TH COMMIT
---------------------------------------------------------------------
3b. Updation Component Lifecycle: 
- See the order of these components in LifecycleUpdate.pdf

- What does each methods do:
+, getDerivedStateFromProps(props, state): used for updating state and initialize 
props. Dont send requests
+, shouldComponentUpdate(nextProp, nextState): Cancel the updating process
or proccedd to update. Can be used for improving performance
, cancel unneccessary updates. Dont send requests here
+, render(): construct the JSX
+, Update Child Component Props
+, getSnapshotBeforeUpdate(prevProps, prevState): takes previous props 
and states, return an object of props and object to perform Last-minute
DOM operations. Dont send requests here
+, componentDidUpdate(): Signal the completion of updating. Can send 
request here. Dont update state here

3c. Lifecycle real example notes: 
- Creation Lifecycle: See the methods in App.js. See the console
to notice what method got executed. Notice that the method is never
called in the code. However, it is executed in the background, that's
why you see it is running in the console.
> this is the whole point of Lifecycle

- Updation Lifecycle (for props): See in Persons.js. Remember to 
type in textbox for to see more output. Same thing need to notice 
as Creation Lifecycle

- Updation Lifecycle (for state): See in App.js. Remember to click
button to see more output. Same thing need to notice

END OF 5TH till 7TH COMMIT
---------------------------------------------------------------------